/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 --keepnames --shadows public/rack1.gltf -o src/admin/components/rack1.jsx 
*/

import React, { useRef } from 'react';
import { useGLTF, PerspectiveCamera } from '@react-three/drei';

export function Model(props) {
  const { nodes, materials } = useGLTF('/rack1.gltf');
  const { materialState, handleMaterial, products } = props;
  return (
    <group {...props} dispose={null}>
      <spotLight
        name="Light"
        intensity={54.351}
        angle={0.654}
        penumbra={0.15}
        decay={2}
        color="#e0d8d8"
        position={[0.59, 2.722, -2.851]}
        rotation={[-2.492, -0.217, 2.811]}
      />
      <PerspectiveCamera
        name="Camera"
        makeDefault={true}
        far={100}
        near={0.1}
        fov={22.895}
        position={[3.006, 3.299, -4.611]}
        rotation={[-2.653, 0.324, 2.974]}
      />
      <spotLight
        name="Light001"
        intensity={54.351}
        angle={0.806}
        penumbra={0.15}
        decay={2}
        color="#d3c9d1"
        position={[0.535, 3.427, 3.959]}
        rotation={[-1.502, -0.395, 1.891]}
      />
      <mesh
        name="Cube002"
        onPointerOver={(event) => handleMaterial({ meshName: 'Cube002', type: 'hoverOver' })}
        onPointerOut={(event) => handleMaterial({ meshName: 'Cube002', type: 'hoverOut' })}
        onClick={(event) => handleMaterial({ meshName: 'Cube002', type: 'clicked' })}
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materialState.Cube002.material}
        position={materialState.Cube002.position}
        scale={[1.647, 1.794, 1.882]}
      />
      <mesh
        name="Cube001"
        onPointerOver={(event) => handleMaterial({ meshName: 'Cube001', type: 'hoverOver' })}
        onPointerOut={(event) => handleMaterial({ meshName: 'Cube001', type: 'hoverOut' })}
        onClick={(event) => handleMaterial({ meshName: 'Cube001', type: 'clicked' })}
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={materialState.Cube001.material}
        position={[materialState.Cube001.position.x,
                  materialState.Cube001.position.y,
                  materialState.Cube001.position.z]}
        scale={[1.647, 1.794, 1.882]}
      />
      <mesh
        name="Cube"
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials['Material.002']}
        scale={[0.021, 0.172, 0.018]}
      />
      { products}
    </group>
  );
}

useGLTF.preload('/rack1.gltf');
